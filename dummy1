package com.vinsys.vilt.core.api;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Example;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.vinsys.vilt.core.entities.Batch;
import com.vinsys.vilt.core.entities.ConnectionHistoryDetails;
import com.vinsys.vilt.core.entities.Organisation;
import com.vinsys.vilt.core.entities.VMUser;
import com.vinsys.vilt.core.exception.GaucaBinding;
import com.vinsys.vilt.core.exception.UserNotfoundException;
import com.vinsys.vilt.core.security.config.repositories.BatchDAO;
import com.vinsys.vilt.core.security.config.repositories.ConnectionHistoryDAO;
import com.vinsys.vilt.core.security.config.repositories.GuacamoleUserDAO;
import com.vinsys.vilt.core.security.config.repositories.OrganizationDAO;
import com.vinsys.vilt.core.utils.IConstants;
import com.vinsys.vilt.core.utils.ResponseGeneratorHelper;
import com.vinsys.vilt.core.utils.ValidationHelper;
import com.vinsys.vilt.core.vo.Group;
import com.vinsys.vilt.core.vo.MessageResponse;
import com.vinsys.vilt.core.vo.ResponseMessage;
import com.vinsys.vilt.guacamole.helper.GaucamoleHelper;
import com.vinsys.vilt.guacamole.vo.GuacamoleUser;

import javassist.tools.rmi.ObjectNotFoundException;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping("/api/v1")
public class CoreController {

	Logger logger = LoggerFactory.getLogger(CoreController.class);

	@Autowired
	OrganizationDAO orgDAO;

	@Autowired
	private GuacamoleUserDAO guacamoleUserDAO;
	@Autowired
	private BatchDAO batchDAO;

	@Autowired
	private ConnectionHistoryDAO connectionHistoryDao;
	@Value("${guacamole.server.url}")
	private String guacamoleServerURL;
	@Autowired
	private GaucamoleHelper guacamoleHelper;

	@Value("${guacamole.server.username}")
	private String guacamoleUsername;

	@Value("${guacamole.server.password}")
	private String guacamolePassword;

	@Autowired
	private ResponseGeneratorHelper responseGenerator;

	private RestTemplate getRestTemplate() {
		return new RestTemplate();
	}

	/**
	 * @description Create a organization for each tenant in your Cloud.
	 * @param organisation
	 * @return
	 */
	@PostMapping(path = "/createOrganization", produces = "application/json", consumes = "application/json")
	public ResponseEntity<?> createOrganization(@RequestBody Organisation organisation) {
		logger.info("createOrganization::Entered");
		ValidationHelper.validateOrganizationInput(organisation);
		if (orgDAO.existsByOrgName(organisation.getOrgName())) {
			return ResponseEntity.status(500).body(responseGenerator.createErrorResponse(IConstants.ORG_ALREADY_EXISTS));
		} else {
			orgDAO.save(organisation);
			return ResponseEntity.ok(responseGenerator.createSuccessResponse(IConstants.ORG_CREATION_SUCCESS, organisation));
		}
	}

	/**
	 * @description Delete a organization unwanted.
	 * @param organisation
	 * @return
	 */
	@DeleteMapping(path = "/deleteOrganization", produces = "application/json", consumes = "application/json")
	public ResponseEntity<?> deleteOrganization(@RequestBody Organisation organisation) {
		logger.info("createOrganization::Entered");
		ValidationHelper.validateOrganizationInput(organisation);
		Organisation org = orgDAO.findOrganisationByOrgName(organisation.getOrgName());
		if (org != null) {
			orgDAO.delete(organisation);
			return ResponseEntity.status(500).body(responseGenerator.createSuccessResponse(IConstants.ORG_DELETED_SUCCESS, org));
		} else {
			return ResponseEntity.status(500).body(responseGenerator.createErrorResponse(IConstants.ORG_DELETED_FAILED));
		}
	}

	/**
	 * @description Create a organization for each tenant in your Cloud.
	 * @param organisation
	 * @return
	 */
	@GetMapping(path = "/listOrganizations", produces = "application/json")
	public ResponseEntity<?> listAllOrganizations() {
		logger.info("createOrganization::Entered");
		List<Organisation> orgs = orgDAO.findAll();
		logger.info("createOrganization::Exited");
		ResponseMessage message = new ResponseMessage(IConstants.ORG_CREATION_SUCCESS);
		message.setEntity(orgs);
		return ResponseEntity.ok(message);
	}

	@PostMapping(path = "/createBatch", produces = "application/json", consumes = "application/json")
	public ResponseEntity<?> createBatch(@RequestBody Batch batch) {
		logger.info("createBatch::Entered");
		ResponseEntity<ResponseMessage> responseEntity = null;
		ValidationHelper.validateBatchInput(batch);
		if (batchAlreadyExists(batch)) {
			return ResponseEntity.status(500).body(responseGenerator.createErrorResponse(IConstants.BATCH_ALREADY_EXISTS));
		} else {
			Group createdGroup = null;
			Group group;
			try {
				group = new Group();
				group.setIdentifier(batch.getBatchName());
				createdGroup = guacamoleHelper.createGuacamoleGroup(group);
				if (createdGroup != null) {
					Organisation orgFromDB = orgDAO.findOrganisationByOrgName(batch.getOrganisation().getOrgName());
					if (orgFromDB == null) {
						throw new ObjectNotFoundException(IConstants.ORG_NOT_FOUND_ERROR);
					} else {
						batch.setOrganisation(orgFromDB);
						batchDAO.save(batch);
						responseEntity = ResponseEntity.status(200).body(responseGenerator.createSuccessResponse(IConstants.BATCH_CREATE_SUCCESS, batch));
					}
				} else {
					throw new RuntimeException("Failed to Create Group in Guacamole ");
				}
			} catch (Exception e) {
				e.printStackTrace();
				if (createdGroup != null)
					guacamoleHelper.deleteGuacamoleGroup(createdGroup);
				if (createdGroup != null)
					batchDAO.delete(batch);
				responseEntity = ResponseEntity.status(500).body(responseGenerator.createErrorResponse(IConstants.BATCH_CREATE_FAIL));
			}
		}
		return responseEntity;
	}

	@GetMapping(path = "/listBatches")
	public ResponseEntity<?> listBatches() {
		return ResponseEntity.ok(responseGenerator.createSuccessResponse("", batchDAO.findAll()));
	}

	@PostMapping("/createUser")
	public ResponseEntity<ResponseMessage> createUser(@RequestBody VMUser vmUser) {
		ValidationHelper.validateGaucamoleUser(vmUser);
		GuacamoleUser gcUser = new GuacamoleUser();
		gcUser.setPassword(vmUser.getPassword());
		gcUser.setUsername(vmUser.getUsername());

		try {
			if (!guacamoleUserDAO.existsByUsername(vmUser.getUsername())) {
				GuacamoleUser createdUser = guacamoleHelper.createGuacamoleUser(gcUser);
				if (createdUser != null && createdUser.getUsername().equals(vmUser.getUsername())) {
					guacamoleUserDAO.save(vmUser);
					return ResponseEntity.ok(responseGenerator.createSuccessResponse(IConstants.USER_CREATE_SUCCESS, createdUser));

				} else {
					return ResponseEntity.status(500).body(responseGenerator.createErrorResponse(IConstants.USER_CREATE_FAIL));
				}
			} else {
				return ResponseEntity.status(500).body(responseGenerator.createErrorResponse(IConstants.USER_ALREADY_EXISTS));
			}
		} catch (Exception e) {

			return ResponseEntity.status(500).body(responseGenerator.createErrorResponse(IConstants.USER_CREATE_FAIL));
		}
	}

	/**
	 * @author dipak
	 * @Decription to get the all connection history and save in db
	 * @return
	 * @throws Exception
	 */

	@GetMapping("/connectionHistory")
	public List<ConnectionHistoryDetails> connectionHoistory() throws Exception {
		logger.info("Inside connection history controller::");
		String history = guacamoleHelper.connectionHistoryDetails();

		ObjectMapper mapper = new ObjectMapper();
		JsonNode jsonNode = mapper.readValue(history, JsonNode.class);
		List<JsonNode> jname = jsonNode.findParents("username");
		for (JsonNode connDetails : jname) {
			ConnectionHistoryDetails connectionHistory = mapper.treeToValue(connDetails, ConnectionHistoryDetails.class);
			if (!connectionHistoryDao.existsByEndDate(connectionHistory.getEndDate()))
				connectionHistoryDao.save(connectionHistory);
		}
		List<ConnectionHistoryDetails> historyList = connectionHistoryDao.findAll();
		return historyList;
	}

	/**
	 * @author dipak
	 * @Decription to get the connection history for particular user
	 * @return
	 * @throws Exception
	 */
	@GetMapping("/connectionHistory/{username}")
	public List<ConnectionHistoryDetails> connectionHoistoryByUserName(@PathVariable String username) throws Exception {
		logger.info("Inside connection history controller::");
		String history = guacamoleHelper.connectionHistoryDetails();

		ObjectMapper mapper = new ObjectMapper();
		JsonNode jsonNode = mapper.readValue(history, JsonNode.class);
		List<JsonNode> jname = jsonNode.findParents("username");
		for (JsonNode connDetails : jname) {
			ConnectionHistoryDetails connectionHistory = mapper.treeToValue(connDetails, ConnectionHistoryDetails.class);

			if (!connectionHistoryDao.existsByEndDate(connectionHistory.getEndDate()))
				connectionHistoryDao.save(connectionHistory);
		}

		List<ConnectionHistoryDetails> HistoryForUser = connectionHistoryDao.findByUsername(username);

		return HistoryForUser;
	}

	/**
	 * @author dipak
	 * @Decription to get the last active status of the user
	 * @return
	 * @throws Exception
	 */
	@GetMapping("/connectionHistory/lastActive/{username}")
	public Timestamp HoistoryByUserNameLastActive(@PathVariable String username) throws Exception {
		logger.info("Inside connection history controller::");
		String history = guacamoleHelper.connectionHistoryDetails();
		ObjectMapper mapper = new ObjectMapper();
		JsonNode jsonNode = mapper.readValue(history, JsonNode.class);
		List<JsonNode> jname = jsonNode.findParents("username");
		for (JsonNode connDetails : jname) {
			ConnectionHistoryDetails connectionHistory = mapper.treeToValue(connDetails, ConnectionHistoryDetails.class);
			if (!connectionHistoryDao.existsByEndDate(connectionHistory.getEndDate()))
				connectionHistoryDao.save(connectionHistory);
		}
		ConnectionHistoryDetails HistoryForUser = connectionHistoryDao.latActiveByusername(username);
		System.out.println(HistoryForUser.getEndDate());
		Timestamp lastActive = HistoryForUser.getEndDate();

		return lastActive;
	}

	private boolean batchAlreadyExists(Batch batch) {
		Example<Batch> batchExample = Example.of(batch);
		return batchDAO.exists(batchExample);
	}

	@GetMapping("/getalluserlist")
	ResponseEntity<?> getDataForGuca() // throws JsonMappingException, JsonProcessingException
	{
		logger.info("######get all user list######");
		try {
			List<VMUser> users = guacamoleUserDAO.findAll();
			return ResponseEntity.ok(responseGenerator.createSuccessResponse("", users));
		} catch (Exception e) {
			logger.error("##########exception in all user list##########");
			return ResponseEntity.ok(new MessageResponse("Exception occured get all user list(gocaConsumer)"));
		}
	}

	private HttpHeaders createGuacaHTTPHeaders() {
		HttpHeaders headers = new HttpHeaders();
		headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));
		headers.add("user-agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36");
		return headers;
	}

	@GetMapping("/getGuacaUser/{username}")
	ResponseEntity<?> getDataForGucaUser(@PathVariable String username) {
		logger.info("######get get Guaca User######");
		try {
			String url = guacamoleServerURL + GaucaBinding.GET_USER + username;
			createGuacaHTTPHeaders();
			String rest2 = getRestTemplate().getForObject(url + GaucaBinding.API_TOKEN + guacamoleHelper.getAuthToken(), String.class);
			ObjectMapper mapper = new ObjectMapper();
			JsonNode jsonNode = mapper.readTree(rest2);
			return new ResponseEntity<>(jsonNode, HttpStatus.OK);
		} catch (Exception e) {
			logger.error("##########exception in get ###guaca user#######");
			return ResponseEntity.ok(new MessageResponse("Exception occured in get guaca user by username"));
		}
	}
//	@DeleteMapping("/deleteGuacaUser/{username}")
//	ResponseEntity<?> deleteDataForGucaUser(@PathVariable String username) {
//		logger.info("######get get Guaca User######");
//		try {
//			String url = guacamoleServerURL + GaucaBinding.GET_USER + username;
//			createGuacaHTTPHeaders();
//			String rest2 = getRestTemplate().getForObject(url + GaucaBinding.API_TOKEN + guacamoleHelper.getAuthToken(), String.class);
//			ObjectMapper mapper = new ObjectMapper();
//			JsonNode jsonNode = mapper.readTree(rest2);
//			return new ResponseEntity<>(jsonNode, HttpStatus.OK);
//		} catch (Exception e) {
//			logger.error("##########exception in get ###guaca user#######");
//			return ResponseEntity.ok(new MessageResponse("Exception occured in get guaca user by username"));
//		}
//	}

	@GetMapping("/gethistory/{username}")
	ResponseEntity<?> getHistoryForGucaUser(@PathVariable String username) throws JsonMappingException, JsonProcessingException {
		logger.info("######get history######");
		try {
			String url = guacamoleServerURL + GaucaBinding.GET_USER + username + IConstants.HISTORY_URL;
			createGuacaHTTPHeaders();
			String rest2 = getRestTemplate().getForObject(url + GaucaBinding.API_TOKEN + guacamoleHelper.getAuthToken(), String.class);
			ObjectMapper mapper = new ObjectMapper();
			JsonNode jsonNode = mapper.readTree(rest2);
			return new ResponseEntity<>(jsonNode, HttpStatus.OK);
		} catch (Exception e) {
			logger.error("##########exception in get history##########");
			return ResponseEntity.ok(new MessageResponse("Exception occured in get history by username"));
		}
	}

	@GetMapping("/gethistory")
	ResponseEntity<?> getHistoryForAllGucaUsers() throws JsonMappingException, JsonProcessingException {
		String url = guacamoleServerURL + GaucaBinding.HISTORY;
		createGuacaHTTPHeaders();
		String rest2 = getRestTemplate().getForObject(url + GaucaBinding.API_TOKEN + guacamoleHelper.getAuthToken(), String.class);
		ObjectMapper mapper = new ObjectMapper();
		JsonNode jsonNode = mapper.readTree(rest2);
		return new ResponseEntity<>(jsonNode, HttpStatus.OK);
	}

	@GetMapping("/getallconnection")
	ResponseEntity<?> getAllConnections() // throws JsonMappingException, JsonProcessingException
	{
		logger.info("######get all connection######");
		try {
			String url = guacamoleServerURL + GaucaBinding.GET_CONNECTIONS;
			createGuacaHTTPHeaders();
			String response = getRestTemplate().getForObject(url + GaucaBinding.API_TOKEN + guacamoleHelper.getAuthToken(), String.class);
			return new ResponseEntity<>(response, HttpStatus.OK);
		} catch (Exception e) {
			logger.error("##########exception in all connection##########");
			return ResponseEntity.ok(new MessageResponse("Exception occured in get all connection"));
		}
	}

	@GetMapping("/getliveconnection")
	ResponseEntity<?> getLiveConnections() // throws JsonMappingException, JsonProcessingException
	{
		logger.info("######get live connection######");
		try {
			String url = guacamoleServerURL + GaucaBinding.GET_LIVE_CONNECTIONS;
			createGuacaHTTPHeaders();
			String response = getRestTemplate().getForObject(url + GaucaBinding.API_TOKEN + guacamoleHelper.getAuthToken(), String.class);
			ObjectMapper mapper = new ObjectMapper();
			JsonNode jsonNode = mapper.readTree(response);
			return new ResponseEntity<>(jsonNode, HttpStatus.OK);
		} catch (Exception e) {
			logger.error("##########exception in live connection##########");
			return ResponseEntity.ok(new MessageResponse("Exception occured in get live connection"));
		}
	}

	@GetMapping("/getusers")
	ResponseEntity<?> getUsers() // throws JsonMappingException, JsonProcessingException
	{
		logger.info("######get user ######");
		try {
			String url = guacamoleServerURL + GaucaBinding.GAUCA_USERS;
			createGuacaHTTPHeaders();
			String response = getRestTemplate().getForObject(url + GaucaBinding.API_TOKEN + guacamoleHelper.getAuthToken(), String.class);
			ObjectMapper mapper = new ObjectMapper();
			JsonNode jsonNode = mapper.readTree(response);
			List<JsonNode> jname = jsonNode.findValues("username");
			return new ResponseEntity<>(jname, HttpStatus.OK);
		} catch (Exception e) {
			logger.error("##########exception in user from guaca##########");
			return ResponseEntity.ok(new MessageResponse("Exception occured in getusers"));
		}
	}

	@GetMapping("/getvm")
	ResponseEntity<?> getAllvm()// throws JsonMappingException, JsonProcessingException
	{
		logger.info("######get vm######");
		try {
			String url = guacamoleServerURL + GaucaBinding.GET_CONNECTIONS;
			createGuacaHTTPHeaders();
			String rest2 = getRestTemplate().getForObject(url + GaucaBinding.API_TOKEN + guacamoleHelper.getAuthToken(), String.class);

			return new ResponseEntity<>(rest2, HttpStatus.OK);
		} catch (Exception e) {
			logger.error("##########exception in get vm ##########");
			return ResponseEntity.ok(new MessageResponse("Exception occured in get all vm"));
		}
	}

	@GetMapping("/getusers-connected-vm/{username}")
	ResponseEntity<?> getUserConnectedVm(@PathVariable String username)
	// throws JsonMappingException, JsonProcessingException
	{
		logger.info("######get connected vm######");
		try {
			String url = guacamoleServerURL + GaucaBinding.CONNECT_USERS_VM + username + GaucaBinding.PERMISSIONS;
			createGuacaHTTPHeaders();
			String response = getRestTemplate().getForObject(url + GaucaBinding.API_TOKEN + guacamoleHelper.getAuthToken(), String.class);
			return new ResponseEntity<>(response, HttpStatus.OK);
		} catch (Exception e) {
			logger.error("##########exception in connected vm##########");
			return ResponseEntity.ok(new MessageResponse("Exception occured in connected vm"));
		}
	}

	@GetMapping("/groups")
	public ResponseEntity<?> getAllGroups() {
		logger.info("Entered::getGropuList");
		ResponseEntity<?> responseEntity = null;
		try {
			Map<String, Group> groups = getRestTemplate().getForObject(guacamoleServerURL + GaucaBinding.GET_USERBY_GROUP_URI + GaucaBinding.API_TOKEN + guacamoleHelper.getAuthToken(), Map.class);
			logger.info("Entered::getGropuList");
			responseEntity = new ResponseEntity<>(groups, HttpStatus.OK);

		} catch (Exception e) {
			logger.error("Exception::getGropuList");
			responseEntity = ResponseEntity.ok(new MessageResponse("Exception occured in getusers"));
		}
		return responseEntity;
	}

	/**
	 * @author Nilesh devdas
	 * @description Get Userby Groups
	 * @param group
	 * @return <all Users for a specific users>
	 */
	@GetMapping("/getusersbygroup/{group}")
	public ResponseEntity<?> getUserByGroup(@PathVariable String group) // throws JsonMappingException,
	{
		logger.info("Entered::getUserByGroup");
		try {
			String url = guacamoleServerURL + GaucaBinding.GET_USERBY_GROUP_URI + group + "/memberUsers";
			logger.info("Guacamole URL::" + url);
			List<String> response = getRestTemplate().getForObject(url + GaucaBinding.API_TOKEN + guacamoleHelper.getAuthToken(), List.class);
			logger.info("Gaucamole Response ::" + response);
			return new ResponseEntity<>(response, HttpStatus.OK);
		} catch (Exception e) {
			logger.error("Exception::getUserByGroup", e);
			return ResponseEntity.ok(new MessageResponse("Exception occured in getusers"));
		}
	}

	/**
	 * @author Nilesh devdas
	 * @description Get Userby Groups
	 * @param group
	 * @return <all Users for a specific users>
	 */
	@GetMapping("/allgroupusers")
	public ResponseEntity<?> listAllUserByGroup() // throws JsonMappingException,
	{
		List<Group> allgroupuser = new ArrayList<Group>();
		logger.info("Entered::listAllUserByGroup");
		Map<String, Group> groups = (Map<String, Group>) getAllGroups().getBody();
		Set<String> groupNames = groups.keySet();
		for (String groupName : groupNames) {
			Group group = new Group();
//			group.setGroupName(groupName);
			// group.setUser((List<String>) getUserByGroup(groupName).getBody());
			allgroupuser.add(group);
		}
		return ResponseEntity.ok(allgroupuser);
	}

	@GetMapping("/getusercount")
	ResponseEntity<?> getUsersCount() // throws JsonMappingException, JsonProcessingException
	{
		logger.info("######get user count ######");
		try {
			List<VMUser> gucaUsers = guacamoleUserDAO.findAll();
			if (gucaUsers == null) {
				logger.error("########## User Count not  Available##########");
				return ResponseEntity.ok(new MessageResponse("User count Not Available"));
			}
			int userCount = gucaUsers.size();
			return new ResponseEntity<>(userCount, HttpStatus.OK);
		} catch (Exception e) {
			logger.error("##########exception in user count##########");
			return ResponseEntity.ok(new MessageResponse("Exception occured in get user count"));
		}
	}

	@GetMapping("/getcountconnection")
	ResponseEntity<?> getConnectionsCount() {
		logger.info("######get count connection######");
		try {
			List<VMUser> vmUsers = guacamoleUserDAO.findAll();
			if (vmUsers == null) {
				logger.error("########## Vm Count not  Available##########");
				return ResponseEntity.ok(new MessageResponse("Vm count Not Available"));
			}
			int VMCount = vmUsers.size();
			return new ResponseEntity<>(VMCount, HttpStatus.OK);
		} catch (Exception e) {
			logger.error("##########exception in count connection##########");
			return ResponseEntity.ok(new MessageResponse("Exception occured in get count connection"));
		}
	}
	
	/**
	 * @author Rushikesh
	 * @Decription to delete gucca user from vilt database.
	 * @return
	 * @throws Exception
	 */
	

	

	
}
